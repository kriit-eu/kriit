After ending every major edit,  refactor according to these rules:

1. *Eliminate Duplication* – Always make a great effort to spot and remove repeated patterns for maximum impact.
2. *Merge Similar Functions* – Consolidate overlapping logic into reusable components.
3. *Remove Redundant Abstractions* – Inline single-use variables/functions when it improves clarity.
4. *Use Modern Syntax* – Prefer ES6+ features for cleaner, more concise code.
5. *Streamline Logic* – Combine related operations where it improves structure.
6. *Reduce Code Wherever Possible* – Always look for opportunities to trim safely.

Then, refactor again according to these rules:

1. *No Code Golf* – Avoid cryptic tricks, short names, and nested ternaries.
2. *Prioritize Maintainability* – Code should be clear to any developer.
3. *Favor Readability Over Brevity* – Shorter is better and encouraged, but not at the cost of clarity.
4. *Name Things Well* – Use descriptive names, even if longer.
5. *Group Logic Cleanly* – Keep related code blocks together.
6. *Avoid Deep Nesting* – Simplify complex structures whenever possible.
7. *Break Long Lines* – Wrap at logical boundaries.
8. *Keep Formatting Consistent* – Uniform style matters.
9. *No One-Liner Cramming* – Don’t stack multiple statements with semicolons.
10. *Limit Nested Ternaries* – No deeper than one level.
11. *Preserve Whitespace* – Don’t remove spacing between unrelated sections.
12. *Clarify Precedence* – Use parentheses around complex expressions.
13. *Handle Errors* – Don’t sacrifice safety for brevity.
14. *No comments* - Dont use comments! Instead write self documenting code. Especially unwelcome are comments that just comment the latest change because over time they collectively pollute and bloat the codebase and become outdated when the code changes.
15. Remove all informative logging to console but leave any warnings and error logging in place.

